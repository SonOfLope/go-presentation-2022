Golang, let's GO!
14 octobre  2022

Présenté par Jonathan Lopez et Thomas Cardin

* Quest-ce que Go ?
Le Go, ou Golang, est un language de programmation open-source, typé statiquement.

- Lancé en 2009 par Google, le langage a été conçu en s'inspirant de de la simplicité de Python et la capacité de C

Conçu pour résoudre des problèmes à l'interne tel que :
    
- Build time
- Dépendances incontrôlées

.image img/gopher.jpg

* Hello, World!

.play src/hello.go

go run hello-world.go

go build hello-world.go

: le package permet de rendre l'application modulaire lorsque l'on veut le rendre executable

: par convention, le fichier qui doit executer le programme doit utiliser l'identifiant main qui permet a la commande go build de construire l'executable

* Concurrency

Go fait l'utilisation de ''goroutines'' et des ''channels'' qui permettent de faire du multi-threading.

- process : programme qui se fait chargé en mémoire avec toutes ces ressources pour fonctionner

: process est ce qu'on appelle un programme qu'on peut éxecuter et qui se fait chargé en mémoire avec toutes ces ressources pour fonctionner, souvent on va avoir besoin de threads pour pouvoir accomplir des tâches en même temps

: On peut le visualiser comme si je prepare mon déjeuner le matin, je repond au telephone et je boit du café

.image img/processThreads.jpg 

* Concurrency

*Parrallélisme:*

- avantage : les threads partage le même espace memoire que le process
- désavantage : Si un problème occure dans un thread du process, il va affecter les autres threads.

.image img/processThreads.jpg 

* Concurrency

- Goroutines : Planifiées de manière coopérative, plutôt que de s'appuyer sur le kernel pour gérer le temps qu'ils se partagent.

- "switch" entre goroutines arrive seulement à des moments défini, lorsqu'un appel explicite est fait.

- Channel : Mechanisme de communication qui permet a une goroutine d'envoyer des valeurs à une autre goroutine.

: Un channel est un lien entre les activités des goroutines. C'est techniquement un canal de transfert de données pouvant être transmises ou lues  

.image img/concurrencyVsParallelism.jpg 

* Demonstration

c <- data : "Push" data dans le channel c
<- c : lire des données de c
.play src/channels.go

* Package management

- Go modules : Projet contenant la collection des packages qui sont des dépendances requises.

- semi-decentralisé : Permet à n'importe quel repo git d'être utilisé comme un module

`go.mod` : Fichier qui definit le nom du module de notre projet, la version de go qui build le projet et une liste de dépendances
`go.sum` : Fichier autogénéré contenant les hashs cryptographique des dépendances directe/indirecte de notre module.

: go mod vendor = quand tu vendor tes dependances, tu peux build le projet sans avoir un acces internet

.image img/goModuleCommands.png

* Bénéfices & désavantages
- Static build 
- Garbage collection automatisé
- Minimaliste 
- Installation est simple, compile facilement, facile à tester, facile à adopter

: La spécification formelle du langage Go ne compte que 50 pages, contient de nombreux exemples et est assez facile à lire.

: static build : pas besoin d'installer this or that pour exécuter une application style nodejs

.image /img/neo.jpg 300 300 
